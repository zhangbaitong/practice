]一：基本操作

iname：镜像名称
cname：容器名称
cid：容器id
lname：本地文件名


1：镜像
   1）获取镜像
  docker pull <iname>

   2）显示本地已有镜像
  docker images;
 
   3) 导出镜像到本地文件
  docker save -o  <lname>  <iname>

   4）导入本地文件到本地镜像库
        docker load --input <lname>
        docker load <  <lname>

   5）删除本地镜像
        docker rmi <iname>

2：容器
   1）启动容器
  基于镜像：docker run -d -i -t <iname>|<cid> /bin/bash
        基于停止状态的容器：docker start <cname>|<cid>

   2）显示容器
  正在运行的容器：docker ps
        所有状态的容器：docker ps -a

   3) 查看容器详细信息
  docker inspect <cname>|<cid>

   4）获取容器的输出信息
  docker logs <cname>

   5）停止容器
  docker stop <cname>|<cid>

   6）进入容器
  在容器内部安装ssh，通过ssh进入容器

  docker v1.3：
    docker exec -i -t <cname>|<cid> /bin/bash

  docker v1.2：
    docker attach  <cname>|<cid>
          缺点：当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示

    nsenter --target $PID --mount --uts --ipc --net --pid
          $PID：容器进程id，nsenter 工具在 util-linux 包2.23版本后包含，需要root权限，详情参考：http://www.stenote.com/2014/08/docker-enter%EF%BC%88nsenter/

   7）导出容器快照到本地文件
  docker export <cid>  >  <lname>

   8）导入本地容器快照文件到本地镜像库
  cat <lname> | docker import  -  <iname>

   9）删除容器
  docker rm  <cname>|<cid>  删除一个运行中的容器，可以添加 -f 参数


3：仓库
   Docker 官方维护了一个公共仓库 Docker Hub
  
   1）登录registry server
      docker login
   
   2）查找官方仓库中的镜像
      docker search <iname>

   3）下载镜像到本地
      docker pull <iname>

   4）将镜像推送到Docker Hub
      docker push <iname>


4：容器间通信
      1）无论容器是否在同一宿主
        容器端口映射到宿主端口，通过宿主端口访问      

      2）同一宿主机不同容器：
       直接访问容器开放的端口
         使用--link在容器间创建连接
             创建数据在容器间共享数据
                        
      3）不同宿主机：
          给容器分配一个其他宿主能访问的ip,通过ip转发的方式访问容器



二：安装过程中遇到的问题
1：centos7增加了很多新特性，例如：
   1）增加了systemctl命令，将service和chkconfig命令结合在了一起
   2）centos默认支持MariaDB，替代mysql

2：删除容器前必须先停止容器，删除镜像前必须先删掉依赖于这个镜像的所有容器。

3：容器启动时，必须同时执行一个一直运行的进程，该进程被杀掉，容器自动退出。

4：共享宿主数据卷到容器，因为用户在宿主和容器中id不同，无法同时在宿主和容器中设置数据卷归属某用户，最后采用在容器间共享数据的方式替代。

5：升级docker到v1.3 
    wget https://get.docker.com/builds/Linux/x86_64/docker-latest -O /usr/bin/docker
    service docker restart




三：建议下一阶段工作
1：创建私有仓库，便于管理镜像。

2：熟悉docker的网络机制，容器资源使用情况监控及分配

3：容器集群管理
     docker的出现，大大降低了环境重复部署工作量，但容器的数量也急剧增加，在单机服务器上部署成百上千个容器也不足为奇，如何方便的管理庞大数量的容器是一个迫切需要解决的问题。   
     目前,docker集群管理方案有（部分）:
     1：谷歌的Kubernetes
     2：Apache Mesos + marathon
     3：Panamax
     4：Docker的分布式应用编排服务
     